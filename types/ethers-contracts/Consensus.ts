/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface ConsensusInterface extends Interface {
    getFunction(nameOrSignature: "CONSENSUS_TIMEOUT" | "MAX_CONSENSUS_THRESHOLD" | "MAX_VALIDATORS" | "MIN_CONSENSUS_THRESHOLD" | "MIN_VALIDATORS" | "addValidator" | "admin" | "allValidators" | "castVote" | "checkConsensus" | "consensusSessions" | "consensusThreshold" | "getAllValidators" | "getConsensusSession" | "getValidatorInfo" | "getValidatorPerformance" | "getVersion" | "getVote" | "isValidator" | "owner" | "removeValidator" | "startConsensus" | "totalValidatorWeight" | "updateAdmin" | "updateConsensusThreshold" | "updateValidatorWeight" | "validatorPerformance" | "validators"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ConsensusReached" | "ValidatorAdded" | "ValidatorRemoved" | "ValidatorWeightUpdated" | "VoteCast"): EventFragment;

    encodeFunctionData(functionFragment: 'CONSENSUS_TIMEOUT', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_CONSENSUS_THRESHOLD', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_VALIDATORS', values?: undefined): string;
encodeFunctionData(functionFragment: 'MIN_CONSENSUS_THRESHOLD', values?: undefined): string;
encodeFunctionData(functionFragment: 'MIN_VALIDATORS', values?: undefined): string;
encodeFunctionData(functionFragment: 'addValidator', values: [AddressLike, BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
encodeFunctionData(functionFragment: 'allValidators', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'castVote', values: [BytesLike, boolean, string]): string;
encodeFunctionData(functionFragment: 'checkConsensus', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'consensusSessions', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'consensusThreshold', values?: undefined): string;
encodeFunctionData(functionFragment: 'getAllValidators', values?: undefined): string;
encodeFunctionData(functionFragment: 'getConsensusSession', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getValidatorInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getValidatorPerformance', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getVersion', values?: undefined): string;
encodeFunctionData(functionFragment: 'getVote', values: [BytesLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'isValidator', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeValidator', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'startConsensus', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'totalValidatorWeight', values?: undefined): string;
encodeFunctionData(functionFragment: 'updateAdmin', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateConsensusThreshold', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateValidatorWeight', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'validatorPerformance', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'validators', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'CONSENSUS_TIMEOUT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_CONSENSUS_THRESHOLD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_VALIDATORS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MIN_CONSENSUS_THRESHOLD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MIN_VALIDATORS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addValidator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allValidators', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'castVote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'checkConsensus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'consensusSessions', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'consensusThreshold', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllValidators', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getConsensusSession', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getValidatorInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getValidatorPerformance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isValidator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeValidator', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'startConsensus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalValidatorWeight', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateConsensusThreshold', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateValidatorWeight', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'validatorPerformance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'validators', data: BytesLike): Result;
  }

  
    export namespace ConsensusReachedEvent {
      export type InputTuple = [meterId: AddressLike, sequence: BigNumberish, consensus: boolean, totalWeight: BigNumberish, requiredWeight: BigNumberish];
      export type OutputTuple = [meterId: string, sequence: bigint, consensus: boolean, totalWeight: bigint, requiredWeight: bigint];
      export interface OutputObject {meterId: string, sequence: bigint, consensus: boolean, totalWeight: bigint, requiredWeight: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ValidatorAddedEvent {
      export type InputTuple = [validator: AddressLike, weight: BigNumberish, description: string];
      export type OutputTuple = [validator: string, weight: bigint, description: string];
      export interface OutputObject {validator: string, weight: bigint, description: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ValidatorRemovedEvent {
      export type InputTuple = [validator: AddressLike, reason: string];
      export type OutputTuple = [validator: string, reason: string];
      export interface OutputObject {validator: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ValidatorWeightUpdatedEvent {
      export type InputTuple = [validator: AddressLike, oldWeight: BigNumberish, newWeight: BigNumberish];
      export type OutputTuple = [validator: string, oldWeight: bigint, newWeight: bigint];
      export interface OutputObject {validator: string, oldWeight: bigint, newWeight: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteCastEvent {
      export type InputTuple = [meterId: AddressLike, sequence: BigNumberish, voter: AddressLike, vote: boolean, weight: BigNumberish];
      export type OutputTuple = [meterId: string, sequence: bigint, voter: string, vote: boolean, weight: bigint];
      export interface OutputObject {meterId: string, sequence: bigint, voter: string, vote: boolean, weight: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Consensus extends BaseContract {
    
    connect(runner?: ContractRunner | null): Consensus;
    waitForDeployment(): Promise<this>;

    interface: ConsensusInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CONSENSUS_TIMEOUT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_CONSENSUS_THRESHOLD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_VALIDATORS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MIN_CONSENSUS_THRESHOLD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MIN_VALIDATORS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    addValidator: TypedContractMethod<
      [validator: AddressLike, weight: BigNumberish, description: string, ],
      [void],
      'nonpayable'
    >
    

    
    admin: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    allValidators: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    castVote: TypedContractMethod<
      [sessionId: BytesLike, vote: boolean, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    checkConsensus: TypedContractMethod<
      [meterId: AddressLike, sequence: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    consensusSessions: TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint, bigint] & {meterId: string, sequence: bigint, startTime: bigint, endTime: bigint, totalWeight: bigint, requiredWeight: bigint, consensusReached: boolean, finalResult: boolean, yesWeight: bigint, noWeight: bigint }],
      'view'
    >
    

    
    consensusThreshold: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getAllValidators: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getConsensusSession: TypedContractMethod<
      [sessionId: BytesLike, ],
      [[string, bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {meterId: string, sequence: bigint, startTime: bigint, endTime: bigint, consensusReached: boolean, finalResult: boolean, yesWeight: bigint, noWeight: bigint, requiredWeight: bigint }],
      'view'
    >
    

    
    getValidatorInfo: TypedContractMethod<
      [validator: AddressLike, ],
      [[bigint, boolean, string, bigint, bigint, bigint] & {weight: bigint, isActive: boolean, description: string, registrationTime: bigint, totalVotes: bigint, correctVotes: bigint }],
      'view'
    >
    

    
    getValidatorPerformance: TypedContractMethod<
      [validator: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getVersion: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getVote: TypedContractMethod<
      [sessionId: BytesLike, voter: AddressLike, ],
      [[boolean, bigint, bigint, string] & {vote: boolean, weight: bigint, timestamp: bigint, reason: string }],
      'view'
    >
    

    
    isValidator: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeValidator: TypedContractMethod<
      [validator: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    startConsensus: TypedContractMethod<
      [meterId: AddressLike, sequence: BigNumberish, ],
      [string],
      'nonpayable'
    >
    

    
    totalValidatorWeight: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    updateAdmin: TypedContractMethod<
      [newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateConsensusThreshold: TypedContractMethod<
      [newThreshold: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateValidatorWeight: TypedContractMethod<
      [validator: AddressLike, newWeight: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    validatorPerformance: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    validators: TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, bigint, boolean, string, bigint, bigint, bigint] & {validator: string, weight: bigint, isActive: boolean, description: string, registrationTime: bigint, totalVotes: bigint, correctVotes: bigint }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CONSENSUS_TIMEOUT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_CONSENSUS_THRESHOLD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_VALIDATORS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MIN_CONSENSUS_THRESHOLD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MIN_VALIDATORS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addValidator'): TypedContractMethod<
      [validator: AddressLike, weight: BigNumberish, description: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'admin'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allValidators'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'castVote'): TypedContractMethod<
      [sessionId: BytesLike, vote: boolean, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'checkConsensus'): TypedContractMethod<
      [meterId: AddressLike, sequence: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'consensusSessions'): TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, bigint, bigint] & {meterId: string, sequence: bigint, startTime: bigint, endTime: bigint, totalWeight: bigint, requiredWeight: bigint, consensusReached: boolean, finalResult: boolean, yesWeight: bigint, noWeight: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'consensusThreshold'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getAllValidators'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getConsensusSession'): TypedContractMethod<
      [sessionId: BytesLike, ],
      [[string, bigint, bigint, bigint, boolean, boolean, bigint, bigint, bigint] & {meterId: string, sequence: bigint, startTime: bigint, endTime: bigint, consensusReached: boolean, finalResult: boolean, yesWeight: bigint, noWeight: bigint, requiredWeight: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getValidatorInfo'): TypedContractMethod<
      [validator: AddressLike, ],
      [[bigint, boolean, string, bigint, bigint, bigint] & {weight: bigint, isActive: boolean, description: string, registrationTime: bigint, totalVotes: bigint, correctVotes: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getValidatorPerformance'): TypedContractMethod<
      [validator: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVersion'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getVote'): TypedContractMethod<
      [sessionId: BytesLike, voter: AddressLike, ],
      [[boolean, bigint, bigint, string] & {vote: boolean, weight: bigint, timestamp: bigint, reason: string }],
      'view'
    >;
getFunction(nameOrSignature: 'isValidator'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeValidator'): TypedContractMethod<
      [validator: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'startConsensus'): TypedContractMethod<
      [meterId: AddressLike, sequence: BigNumberish, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalValidatorWeight'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'updateAdmin'): TypedContractMethod<
      [newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateConsensusThreshold'): TypedContractMethod<
      [newThreshold: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateValidatorWeight'): TypedContractMethod<
      [validator: AddressLike, newWeight: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'validatorPerformance'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'validators'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, bigint, boolean, string, bigint, bigint, bigint] & {validator: string, weight: bigint, isActive: boolean, description: string, registrationTime: bigint, totalVotes: bigint, correctVotes: bigint }],
      'view'
    >;

    getEvent(key: 'ConsensusReached'): TypedContractEvent<ConsensusReachedEvent.InputTuple, ConsensusReachedEvent.OutputTuple, ConsensusReachedEvent.OutputObject>;
getEvent(key: 'ValidatorAdded'): TypedContractEvent<ValidatorAddedEvent.InputTuple, ValidatorAddedEvent.OutputTuple, ValidatorAddedEvent.OutputObject>;
getEvent(key: 'ValidatorRemoved'): TypedContractEvent<ValidatorRemovedEvent.InputTuple, ValidatorRemovedEvent.OutputTuple, ValidatorRemovedEvent.OutputObject>;
getEvent(key: 'ValidatorWeightUpdated'): TypedContractEvent<ValidatorWeightUpdatedEvent.InputTuple, ValidatorWeightUpdatedEvent.OutputTuple, ValidatorWeightUpdatedEvent.OutputObject>;
getEvent(key: 'VoteCast'): TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;

    filters: {
      
      'ConsensusReached(address,uint256,bool,uint256,uint256)': TypedContractEvent<ConsensusReachedEvent.InputTuple, ConsensusReachedEvent.OutputTuple, ConsensusReachedEvent.OutputObject>;
      ConsensusReached: TypedContractEvent<ConsensusReachedEvent.InputTuple, ConsensusReachedEvent.OutputTuple, ConsensusReachedEvent.OutputObject>;
    

      'ValidatorAdded(address,uint256,string)': TypedContractEvent<ValidatorAddedEvent.InputTuple, ValidatorAddedEvent.OutputTuple, ValidatorAddedEvent.OutputObject>;
      ValidatorAdded: TypedContractEvent<ValidatorAddedEvent.InputTuple, ValidatorAddedEvent.OutputTuple, ValidatorAddedEvent.OutputObject>;
    

      'ValidatorRemoved(address,string)': TypedContractEvent<ValidatorRemovedEvent.InputTuple, ValidatorRemovedEvent.OutputTuple, ValidatorRemovedEvent.OutputObject>;
      ValidatorRemoved: TypedContractEvent<ValidatorRemovedEvent.InputTuple, ValidatorRemovedEvent.OutputTuple, ValidatorRemovedEvent.OutputObject>;
    

      'ValidatorWeightUpdated(address,uint256,uint256)': TypedContractEvent<ValidatorWeightUpdatedEvent.InputTuple, ValidatorWeightUpdatedEvent.OutputTuple, ValidatorWeightUpdatedEvent.OutputObject>;
      ValidatorWeightUpdated: TypedContractEvent<ValidatorWeightUpdatedEvent.InputTuple, ValidatorWeightUpdatedEvent.OutputTuple, ValidatorWeightUpdatedEvent.OutputObject>;
    

      'VoteCast(address,uint256,address,bool,uint256)': TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
      VoteCast: TypedContractEvent<VoteCastEvent.InputTuple, VoteCastEvent.OutputTuple, VoteCastEvent.OutputObject>;
    
    };
  }