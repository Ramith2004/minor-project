/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface MeterRegistryInterface extends Interface {
    getFunction(nameOrSignature: "MAX_METERS_PER_OWNER" | "REGISTRATION_FEE" | "addAuthorizedUser" | "addMeterType" | "admin" | "allMeterTypes" | "allMeters" | "getAllMeterTypes" | "getAllMeters" | "getMeterInfo" | "getMeterType" | "getTotalMeterCount" | "getVersion" | "isActive" | "isRegistered" | "meterCount" | "meterTypes" | "meters" | "owner" | "reactivateMeter" | "registerMeter" | "registeredMeters" | "removeAuthorizedUser" | "suspendMeter" | "transferMeterOwnership" | "updateAdmin" | "updateMeter" | "updateMeterType" | "withdraw"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "MeterOwnershipTransferred" | "MeterReactivated" | "MeterRegistered" | "MeterSuspended" | "MeterUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'MAX_METERS_PER_OWNER', values?: undefined): string;
encodeFunctionData(functionFragment: 'REGISTRATION_FEE', values?: undefined): string;
encodeFunctionData(functionFragment: 'addAuthorizedUser', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'addMeterType', values: [string, string, BigNumberish, BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
encodeFunctionData(functionFragment: 'allMeterTypes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'allMeters', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAllMeterTypes', values?: undefined): string;
encodeFunctionData(functionFragment: 'getAllMeters', values?: undefined): string;
encodeFunctionData(functionFragment: 'getMeterInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getMeterType', values: [string]): string;
encodeFunctionData(functionFragment: 'getTotalMeterCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getVersion', values?: undefined): string;
encodeFunctionData(functionFragment: 'isActive', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isRegistered', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'meterCount', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'meterTypes', values: [string]): string;
encodeFunctionData(functionFragment: 'meters', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'reactivateMeter', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'registerMeter', values: [AddressLike, string, string]): string;
encodeFunctionData(functionFragment: 'registeredMeters', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'removeAuthorizedUser', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'suspendMeter', values: [AddressLike, string]): string;
encodeFunctionData(functionFragment: 'transferMeterOwnership', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'updateAdmin', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updateMeter', values: [AddressLike, string, string]): string;
encodeFunctionData(functionFragment: 'updateMeterType', values: [string, string, BigNumberish, BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'MAX_METERS_PER_OWNER', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'REGISTRATION_FEE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addAuthorizedUser', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addMeterType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allMeterTypes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allMeters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllMeterTypes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllMeters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMeterInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMeterType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTotalMeterCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getVersion', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isActive', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isRegistered', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'meterCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'meterTypes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'meters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'reactivateMeter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerMeter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registeredMeters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeAuthorizedUser', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'suspendMeter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferMeterOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMeter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMeterType', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  }

  
    export namespace MeterOwnershipTransferredEvent {
      export type InputTuple = [meterId: AddressLike, oldOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [meterId: string, oldOwner: string, newOwner: string];
      export interface OutputObject {meterId: string, oldOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MeterReactivatedEvent {
      export type InputTuple = [meterId: AddressLike, admin: AddressLike, reason: string];
      export type OutputTuple = [meterId: string, admin: string, reason: string];
      export interface OutputObject {meterId: string, admin: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MeterRegisteredEvent {
      export type InputTuple = [meterId: AddressLike, meterType: string, location: string, owner: AddressLike, registrationTime: BigNumberish];
      export type OutputTuple = [meterId: string, meterType: string, location: string, owner: string, registrationTime: bigint];
      export interface OutputObject {meterId: string, meterType: string, location: string, owner: string, registrationTime: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MeterSuspendedEvent {
      export type InputTuple = [meterId: AddressLike, admin: AddressLike, reason: string];
      export type OutputTuple = [meterId: string, admin: string, reason: string];
      export interface OutputObject {meterId: string, admin: string, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MeterUpdatedEvent {
      export type InputTuple = [meterId: AddressLike, meterType: string, location: string, owner: AddressLike];
      export type OutputTuple = [meterId: string, meterType: string, location: string, owner: string];
      export interface OutputObject {meterId: string, meterType: string, location: string, owner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MeterRegistry extends BaseContract {
    
    connect(runner?: ContractRunner | null): MeterRegistry;
    waitForDeployment(): Promise<this>;

    interface: MeterRegistryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    MAX_METERS_PER_OWNER: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    REGISTRATION_FEE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    addAuthorizedUser: TypedContractMethod<
      [meterId: AddressLike, user: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    addMeterType: TypedContractMethod<
      [name: string, description: string, maxValue: BigNumberish, minValue: BigNumberish, isActive: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    admin: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    allMeterTypes: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    allMeters: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    getAllMeterTypes: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getAllMeters: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getMeterInfo: TypedContractMethod<
      [meterId: AddressLike, ],
      [[string, string, string, bigint, boolean, boolean] & {meterType: string, location: string, owner: string, registrationTime: bigint, meterIsActive: boolean, meterIsSuspended: boolean }],
      'view'
    >
    

    
    getMeterType: TypedContractMethod<
      [name: string, ],
      [[string, bigint, bigint, boolean] & {description: string, maxValue: bigint, minValue: bigint, isActive: boolean }],
      'view'
    >
    

    
    getTotalMeterCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getVersion: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    isActive: TypedContractMethod<
      [meterId: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isRegistered: TypedContractMethod<
      [meterId: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    meterCount: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    meterTypes: TypedContractMethod<
      [arg0: string, ],
      [[string, string, bigint, bigint, boolean] & {name: string, description: string, maxValue: bigint, minValue: bigint, isActive: boolean }],
      'view'
    >
    

    
    meters: TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, string, bigint, boolean, boolean, string, string, bigint, bigint] & {meterId: string, meterType: string, location: string, owner: string, registrationTime: bigint, isActive: boolean, isSuspended: boolean, suspensionReason: string, suspendedBy: string, suspensionTime: bigint, authorizedUserCount: bigint }],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    reactivateMeter: TypedContractMethod<
      [meterId: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    registerMeter: TypedContractMethod<
      [meterId: AddressLike, meterType: string, location: string, ],
      [void],
      'payable'
    >
    

    
    registeredMeters: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    removeAuthorizedUser: TypedContractMethod<
      [meterId: AddressLike, user: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    suspendMeter: TypedContractMethod<
      [meterId: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    transferMeterOwnership: TypedContractMethod<
      [meterId: AddressLike, newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateAdmin: TypedContractMethod<
      [newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updateMeter: TypedContractMethod<
      [meterId: AddressLike, meterType: string, location: string, ],
      [void],
      'nonpayable'
    >
    

    
    updateMeterType: TypedContractMethod<
      [name: string, description: string, maxValue: BigNumberish, minValue: BigNumberish, isActive: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    withdraw: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'MAX_METERS_PER_OWNER'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'REGISTRATION_FEE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addAuthorizedUser'): TypedContractMethod<
      [meterId: AddressLike, user: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addMeterType'): TypedContractMethod<
      [name: string, description: string, maxValue: BigNumberish, minValue: BigNumberish, isActive: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'admin'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allMeterTypes'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'allMeters'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getAllMeterTypes'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getAllMeters'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getMeterInfo'): TypedContractMethod<
      [meterId: AddressLike, ],
      [[string, string, string, bigint, boolean, boolean] & {meterType: string, location: string, owner: string, registrationTime: bigint, meterIsActive: boolean, meterIsSuspended: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getMeterType'): TypedContractMethod<
      [name: string, ],
      [[string, bigint, bigint, boolean] & {description: string, maxValue: bigint, minValue: bigint, isActive: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getTotalMeterCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getVersion'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'isActive'): TypedContractMethod<
      [meterId: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isRegistered'): TypedContractMethod<
      [meterId: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'meterCount'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'meterTypes'): TypedContractMethod<
      [arg0: string, ],
      [[string, string, bigint, bigint, boolean] & {name: string, description: string, maxValue: bigint, minValue: bigint, isActive: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'meters'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, string, bigint, boolean, boolean, string, string, bigint, bigint] & {meterId: string, meterType: string, location: string, owner: string, registrationTime: bigint, isActive: boolean, isSuspended: boolean, suspensionReason: string, suspendedBy: string, suspensionTime: bigint, authorizedUserCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'reactivateMeter'): TypedContractMethod<
      [meterId: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registerMeter'): TypedContractMethod<
      [meterId: AddressLike, meterType: string, location: string, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'registeredMeters'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'removeAuthorizedUser'): TypedContractMethod<
      [meterId: AddressLike, user: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'suspendMeter'): TypedContractMethod<
      [meterId: AddressLike, reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferMeterOwnership'): TypedContractMethod<
      [meterId: AddressLike, newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateAdmin'): TypedContractMethod<
      [newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateMeter'): TypedContractMethod<
      [meterId: AddressLike, meterType: string, location: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateMeterType'): TypedContractMethod<
      [name: string, description: string, maxValue: BigNumberish, minValue: BigNumberish, isActive: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdraw'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'MeterOwnershipTransferred'): TypedContractEvent<MeterOwnershipTransferredEvent.InputTuple, MeterOwnershipTransferredEvent.OutputTuple, MeterOwnershipTransferredEvent.OutputObject>;
getEvent(key: 'MeterReactivated'): TypedContractEvent<MeterReactivatedEvent.InputTuple, MeterReactivatedEvent.OutputTuple, MeterReactivatedEvent.OutputObject>;
getEvent(key: 'MeterRegistered'): TypedContractEvent<MeterRegisteredEvent.InputTuple, MeterRegisteredEvent.OutputTuple, MeterRegisteredEvent.OutputObject>;
getEvent(key: 'MeterSuspended'): TypedContractEvent<MeterSuspendedEvent.InputTuple, MeterSuspendedEvent.OutputTuple, MeterSuspendedEvent.OutputObject>;
getEvent(key: 'MeterUpdated'): TypedContractEvent<MeterUpdatedEvent.InputTuple, MeterUpdatedEvent.OutputTuple, MeterUpdatedEvent.OutputObject>;

    filters: {
      
      'MeterOwnershipTransferred(address,address,address)': TypedContractEvent<MeterOwnershipTransferredEvent.InputTuple, MeterOwnershipTransferredEvent.OutputTuple, MeterOwnershipTransferredEvent.OutputObject>;
      MeterOwnershipTransferred: TypedContractEvent<MeterOwnershipTransferredEvent.InputTuple, MeterOwnershipTransferredEvent.OutputTuple, MeterOwnershipTransferredEvent.OutputObject>;
    

      'MeterReactivated(address,address,string)': TypedContractEvent<MeterReactivatedEvent.InputTuple, MeterReactivatedEvent.OutputTuple, MeterReactivatedEvent.OutputObject>;
      MeterReactivated: TypedContractEvent<MeterReactivatedEvent.InputTuple, MeterReactivatedEvent.OutputTuple, MeterReactivatedEvent.OutputObject>;
    

      'MeterRegistered(address,string,string,address,uint256)': TypedContractEvent<MeterRegisteredEvent.InputTuple, MeterRegisteredEvent.OutputTuple, MeterRegisteredEvent.OutputObject>;
      MeterRegistered: TypedContractEvent<MeterRegisteredEvent.InputTuple, MeterRegisteredEvent.OutputTuple, MeterRegisteredEvent.OutputObject>;
    

      'MeterSuspended(address,address,string)': TypedContractEvent<MeterSuspendedEvent.InputTuple, MeterSuspendedEvent.OutputTuple, MeterSuspendedEvent.OutputObject>;
      MeterSuspended: TypedContractEvent<MeterSuspendedEvent.InputTuple, MeterSuspendedEvent.OutputTuple, MeterSuspendedEvent.OutputObject>;
    

      'MeterUpdated(address,string,string,address)': TypedContractEvent<MeterUpdatedEvent.InputTuple, MeterUpdatedEvent.OutputTuple, MeterUpdatedEvent.OutputObject>;
      MeterUpdated: TypedContractEvent<MeterUpdatedEvent.InputTuple, MeterUpdatedEvent.OutputTuple, MeterUpdatedEvent.OutputObject>;
    
    };
  }